#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define N 10 // Maximum board size

void printBoard(char board[N][N], int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%c ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

bool isSafe(char board[N][N], int row, int col, int size) {
    // Check if there's a queen in the same column
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 'Q') {
            return false;
        }
    }

    // Check the upper left diagonal
    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    // Check the upper right diagonal
    for (int i = row - 1, j = col + 1; i >= 0 && j < size; i--, j++) {
        if (board[i][j] == 'Q') {
            return false;
        }
    }

    return true;
}

bool solveNQueens(char board[N][N], int row, int size) {
    if (row == size) {
        printBoard(board, size);
        return true;
    }

    bool foundSolution = false;
    for (int col = 0; col < size; col++) {
        if (isSafe(board, row, col, size)) {
            board[row][col] = 'Q';
            foundSolution = solveNQueens(board, row + 1, size) || foundSolution;
            board[row][col] = '.';
        }
    }

    return foundSolution;
}

int main() {
    int size;
    printf("Enter the size of the chessboard (N): ");
    scanf("%d", &size);

    char board[N][N];

    // Initialize the board
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            board[i][j] = '.';
        }
    }

    solveNQueens(board, 0, size);

    return 0;
}

